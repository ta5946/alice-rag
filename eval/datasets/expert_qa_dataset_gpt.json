[
  {
    "id": 1,
    "author": "Marco",
    "question": "How do you run a simple simulation at generation level?",
    "correct_answer": null
  },
  {
    "id": 2,
    "author": "Marco",
    "question": "What are the differences between using o2-sim and running a full simulation workflow?",
    "correct_answer": null
  },
  {
    "id": 3,
    "author": "Marco",
    "question": "Which generators are natively included in AliGenO2?",
    "correct_answer": null
  },
  {
    "id": 4,
    "author": "Marco",
    "question": "How do you create and use event pools?",
    "correct_answer": null
  },
  {
    "id": 5,
    "author": "Marco",
    "question": "Can you provide CCDB snapshots for simulations instead of downloading them each time? If so, how?",
    "correct_answer": null
  },
  {
    "id": 6,
    "author": "Marco",
    "question": "What are the components of a full simulation workflow?",
    "correct_answer": null
  },
  {
    "id": 7,
    "author": "Marco",
    "question": "Can you read HepMC formatted data?",
    "correct_answer": null
  },
  {
    "id": 8,
    "author": "Marco",
    "question": "Is there a way to generate data on-the-fly for hyperloop usage?",
    "correct_answer": null
  },
  {
    "id": 9,
    "author": "Marco",
    "question": "Is there a simple mechanism to combine particles coming from different generators for each event?",
    "correct_answer": null
  },
  {
    "id": 10,
    "author": "Marco",
    "question": "Which tool can be used to run a test production on the GRID using the users quota? How does it work?",
    "correct_answer": null
  },
  {
    "id": 11,
    "author": "Sandro",
    "question": "How can I run a basic ALICE detector simulation for Run3?",
    "correct_answer": "You can use the `o2-sim` executable with a predefined generator and Geant backend. For example:\n\n```\no2-sim -g pythia8pp -e TGeant4 -n 10 -j 8\n```\n\nThis will simulate 10 proton–proton collision events in the full ALICE geometry using Geant4 on 8 parallel workers. The main outputs are hit files (e.g. `o2sim_HitsITS.root`) for each sensitive detector and a kinematics file (`o2sim_Kine.root`) listing all primary and secondary particles."
  },
  {
    "id": 12,
    "author": "Sandro",
    "question": "How to run Run3 detector simulation?",
    "correct_answer": "For Run 3, the detector simulation has been fully rewritten to be multi‑core capable and asynchronous. You still invoke it with `o2-sim` as above (e.g. `o2-sim -g pythia8pp -e TGeant4 -n 10 -j 8`). Under the hood it overlays event generation, particle transport and hit processing across threads."
  },
  {
    "id": 13,
    "author": "Sandro",
    "question": "How to run Run3 Geant simulation?",
    "correct_answer": "Use `o2-sim` with the `-e` option to choose your Virtual Monte Carlo backend. For Geant4:\n\n```\no2-sim -g pythia8pp -e TGeant4 -n 10 -j 8\n```\n\nYou can also select Geant3 or FLUKA by setting `-e TGeant3` or `-e TFluka`."
  },
  {
    "id": 14,
    "author": "Sandro",
    "question": "Describe the o2-sim executable.",
    "correct_answer": "`o2-sim` is the ALICE detector simulation steering executable. It handles event generation, builds the detector geometry and materials, and runs particle transport through a Virtual Monte Carlo interface. Users can choose Geant4, Geant3 or FLUKA as the backend. Full documentation is at https://aliceo2group.github.io/simulation/docs/transport/ and examples are in the `run/SimExamples` folder of the AliceO2 GitHub repository. Note that `o2-sim` is just one stage of the full MC workflow—generation, simulation, digitization and reconstruction—maintained in the O2DPG repository."
  },
  {
    "id": 15,
    "author": "Sandro",
    "question": "How can I run the production MC workflow for ALICE?",
    "correct_answer": "ALICE’s full MC workflow is provided in the O2DPG repository. You first generate a workflow description with:\n\n```bash\n${O2DPG_ROOT}/MC/bin/o2dpg_sim_workflow.py \\\n  -eCM 14000 -col pp -gen pythia8 -tf 1 -ns 2000 \\\n  --interactionRate 500000 -run 302000\n```\n\nThis creates a `workflow.json` describing all stages from generation through AOD. You then execute it up to a target stage with:\n\n```bash\n${O2DPG_ROOT}/MC/bin/o2dpg_workflow_runner.py -f workflow.json -tt aod\n```"
  },
  {
    "id": 16,
    "author": "Sandro",
    "question": "Script to run MC in ALICE3?",
    "correct_answer": "For a turnkey MC production matching real Run 3 conditions, use `anchorMC.sh` in O2DPG’s `MC/run/ANCHOR` directory. You only need to set a few environment variables (data taking period, pass name, interaction type, generator options, etc.), for example:\n\n```bash\nexport ALIEN_JDL_LPMANCHORPASSNAME=apass4\nexport ALIEN_JDL_LPMINTERACTIONTYPE=Pb-Pb\nexport ALIEN_JDL_ANCHOR_SIM_OPTIONS=\"-gen pythia8pp\"\nexport NTIMEFRAMES=2  # number of timeframes\nexport NSIGEVENTS=5000\n# …other mandatory ALIEN_JDL_* variables…\n\n${O2DPG_ROOT}/MC/run/ANCHOR/anchorMC.sh\n```"
  },
  {
    "id": 17,
    "author": "Sandro",
    "question": "How can I load the software necessary to run simulation, reconstruction etc?",
    "correct_answer": "Use the O2PDPSuite package from CVMFS. Load it with:\n\n```\n/cvmfs/alice.cern.ch/bin/alienv enter O2PDPSuite::VERSION\n```\n\nwhere `VERSION` is a published tag (e.g. `MC-prod-2025-v1-2`) or a daily build (`daily-20250711-0000-1`). This provides all Run 3 MC pipeline and analysis components on EL9."
  },
  {
    "id": 18,
    "author": "Sandro",
    "question": "What software packages are required to run the simulation pipeline?",
    "correct_answer": "The main package is `O2PDPSuite`, which includes generators, detector simulation, digitization and reconstruction. It’s deployed on CVMFS and loaded via `alienv` as above."
  },
  {
    "id": 19,
    "author": "Sandro",
    "question": "Software packages for ALICE simulation?",
    "correct_answer": "For prebuilt binaries, use `O2PDPSuite` from CVMFS. Alternatively, you can build everything yourself using the `aliBuild`/`alidist` ecosystem—see https://alice-doc.github.io/alice-analysis-tutorial/building/ for instructions."
  },
  {
    "id": 20,
    "author": "Sandro",
    "question": "How can I configure ALICE MC?",
    "correct_answer": "You configure ALICE MC using a combination of top‑level command‑line options and deeper ConfigurableParams. Top‑level options (e.g. event generator, backend, output file) are listed via `o2-sim --help`. For fine‑grained control you pass key‑value pairs of the form `MainKey.SubKey=Value` to any executable via `--configKeyValues`. For example:\n\n```bash\no2-sim -e TGeant4 --configKeyValues=\"G4Params.configMacroFile=myG4config.in\"\n```"
  },
  {
    "id": 21,
    "author": "Sandro",
    "question": "How can I configure ALICE Run3 simulation?",
    "correct_answer": "Run 3 simulation is configured the same way: choose your event generator, Geant backend, number of events, etc. via the `o2-sim` command line, and use `--configKeyValues=\"MainKey.SubKey=Value\"` for detailed runtime parameters. To see all available configurable parameters and valid keys, consult `o2-sim --help` and the ConfigurableParams registry in the documentation."
  },
  {
    "id": 22,
    "author": "Sandro",
    "question": "What event-generators are supported?",
    "correct_answer": null
  },
  {
    "id": 23,
    "author": "Sandro",
    "question": "How can I set a particular event generator for simulation?",
    "correct_answer": "Pass the generator name with the `-g` option to `o2-sim`. For example: `o2-sim -g pythia8hi -n 11 --noGeant` sets the generator to `pythia8hi`."
  },
  {
    "id": 24,
    "author": "Sandro",
    "question": "How can I only obtain the output of the event-generation stage?",
    "correct_answer": "You can:\n\n1. Use `o2-sim --noGeant` to skip detector simulation (e.g. `o2-sim -g pythia8hi -n 11 --noGeant`).\n2. Use the dedicated DPL tool `o2-sim-dpl-eventgen` to generate events on‑the‑fly without writing hits.\n3. In an O2DPG workflow, run the workflow only up to the `sgngen` stage: `o2dpg_workflow_runner.py -f workflow.json -tt sgngen`."
  },
  {
    "id": 25,
    "author": "Sandro",
    "question": "How to do only event generation?",
    "correct_answer": "Same as above: either use `o2-sim --noGeant`, use `o2-sim-dpl-eventgen`, or execute the O2DPG workflow only up to the event-generation (`sgngen`) stage."
  },
  {
    "id": 26,
    "author": "Sandro",
    "question": "How can I simulate only specific detectors in the ALICE MC pipeline?",
    "correct_answer": "With `o2-sim` you can control modules and readout at two levels:\n\n1. **Module-level inclusion/exclusion**\n   - `-m MODULE1 MODULE2 …` to include only specified modules (including passive material), e.g.:  \n     ```bash\n     o2-sim -m PIPE ITS TPC\n     ```\n   - `--skipModules MODULE` to exclude specific modules, e.g.:  \n     ```bash\n     o2-sim --skipModules ZDC\n     ```\n\n2. **Readout-level filtering**\n   - `--readoutDetectors DET1 DET2 …` instantiates the full geometry (minus any skipped modules) but only writes hits for the listed sensitive detectors, e.g.:  \n     ```bash\n     o2-sim --skipModules ZDC --readoutDetectors ITS TPC\n     ```\n\nIn the O2DPG MC workflows you can use the analogous `--readoutDets` option with `o2dpg_sim_workflow.py` to configure which detectors produce output in the integrated pipeline."
  },
  {
    "id": 27,
    "author": "Sandro",
    "question": "Where can I find the documentation for ALICE detector simulation?",
    "correct_answer": "The main documentation is available at https://aliceo2group.github.io/simulation/, which includes detailed ALICE detector simulation guides. You can also find concrete `o2-sim` examples in the SimExamples folder on GitHub: https://github.com/AliceO2Group/AliceO2/tree/dev/run/SimExamples."
  },
  {
    "id": 28,
    "author": "Sandro",
    "question": "Where can I find the documentation for ALICE Run3 MC?",
    "correct_answer": "Run 3 MC documentation is part of the same simulation site: https://aliceo2group.github.io/simulation/, with dedicated sections on Run 3 workflows and configuration. Example pipelines are provided in the O2DPG and AliceO2 repositories."
  },
  {
    "id": 29,
    "author": "Sandro",
    "question": "How to obtain support for ALICE simulation?",
    "correct_answer": "User support is available via the ALICE Mattermost channels. Join the `o2-simulation` channel at https://mattermost.web.cern.ch/alice/channels/o2-simulation to ask questions and get help from the simulation experts."
  },
  {
    "id": 30,
    "author": "Sandro",
    "question": "Where or how should I report bugs or ask for feature requests for simulation?",
    "correct_answer": "Please file bug reports or feature requests in the ALICE JIRA under project **O2** (https://its.cern.ch/jira/projects/O2), tagging your ticket with “simulation.”"
  },
  {
    "id": 31,
    "author": "Sandro",
    "question": "What is a MClabel in ALICE run3 simulation?",
    "correct_answer": "In ALICE Run 3, a Monte Carlo label (MCLabel) is the triple `(source_id, event_id, track_id)` that uniquely identifies an MCTrack across one or more kinematics files. It is implemented via the C++ class `o2::MCCompLabel`."
  },
  {
    "id": 32,
    "author": "Sandro",
    "question": "What about MC labels in ALICE simulation?",
    "correct_answer": "MC labels in ALICE simulation refer to the same `(source_id, event_id, track_id)` identifier used to index MCTrack objects in kinematics files, allowing combination of multiple files (e.g., signal/background) and unambiguous track provenance."
  },
  {
    "id": 33,
    "author": "Sandro",
    "question": "How does MCTruth work?",
    "correct_answer": "MCTruth uses MCLabels to associate downstream products (digits, clusters, reconstructed tracks) with their originating MCTrack(s). By storing these labels, one can perform closure tests, efficiency studies, and detailed physics analyses using the true generator- and simulation-level information."
  },
  {
    "id": 34,
    "author": "Sandro",
    "question": "How to access MC tracks given a MC label?",
    "correct_answer": "Use the `MCKinematicsReader` class. Initialize it with a kinematics file or digitization/collision context, then call:\n\n```cpp\nMCTrack const& track = reader.getTrack(mcLabel);\n```\n\nAlternatively, to get all tracks for a given event (single source_id):\n\n```cpp\nstd::vector<MCTrack> const& tracks = reader.getTracks(eventId);\n```"
  },
  {
    "id": 35,
    "author": "Sandro",
    "question": "How to access TrackReferences?",
    "correct_answer": "With `MCKinematicsReader` you can fetch the `TrackReference`s for a given MCLabel via:\n\n```cpp\ngsl::span<o2::TrackReference> refs = reader.getTrackRefs(sourceId, eventId, trackId);\n```"
  },
  {
    "id": 36,
    "author": "Sandro",
    "question": "Provide an example of job script running anchored MC",
    "correct_answer": "#!/usr/bin/env bash\n\n# Define some obligatory environment variables\n# referencing/defining the data taking period for this MC\nexport ALIEN_JDL_LPMANCHORPASSNAME=apass4\nexport ALIEN_JDL_MCANCHOR=apass4\nexport ALIEN_JDL_CPULIMIT=8\nexport ALIEN_JDL_LPMRUNNUMBER=545312\nexport ALIEN_JDL_LPMPRODUCTIONTYPE=MC\nexport ALIEN_JDL_LPMINTERACTIONTYPE=Pb-Pb\nexport ALIEN_JDL_LPMPRODUCTIONTAG=LHC24a2_mystudy\nexport ALIEN_JDL_LPMANCHORRUN=545312\nexport ALIEN_JDL_LPMANCHORPRODUCTION=LHC23zzo\nexport ALIEN_JDL_LPMANCHORYEAR=2023\n\n# event generator config to be used\nexport ALIEN_JDL_ANCHOR_SIM_OPTIONS=\"-gen pythia8pp\"\n\n# some numbers\nexport NTIMEFRAMES=2   # number of timeframes to do\nexport NSIGEVENTS=5000 # <-- an upper boundary; actual number is the min of this and what fits into a timeframe\nexport PRODSPLIT=100\nexport SPLITID=50\nexport CYCLE=0\n\nexport ALIEN_PROC_ID=${ALIEN_PROC_ID:-2963436952}\n\n# start the actual workflow\n${O2DPG_ROOT}/MC/run/ANCHOR/anchorMC.sh\n\n# This script runs a single MC job for run 545312 (Pb-Pb, 2023) over 2 timeframes.\n# In a real GRID production the user typically only sets ALIEN_JDL_ANCHOR_SIM_OPTIONS;\n# the rest is provided by the operator/system."
  }
]